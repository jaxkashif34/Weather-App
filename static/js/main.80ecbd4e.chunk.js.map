{"version":3,"sources":["IsLoading.js","App.js","index.js"],"names":["IsLoading","style","fontSize","App","useState","loading","setLoading","apiData","setApiData","city","setCity","weatherMood","setWeatherMood","getWeather","a","Axios","get","response","console","log","useEffect","data","weather","description","weatherIcon","date","Date","day","getDay","currentmonth","getMonth","year","getFullYear","currentday","getDate","msToTime","milli","seconds","Math","floor","className","sys","country","src","alt","main","temp","pressure","humidity","wind","speed","class","sunrise","sunset","sea_level","grnd_level","type","placeholder","name","id","required","value","onChange","e","target","for","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80ecbd4e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst IsLoading = () => {\r\n  return (\r\n    <div style={{ fontSize: \"40px\" }}>\r\n      <h1>Loading...</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IsLoading;\r\n","import React, { useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nimport IsLoading from \"./IsLoading\";\nimport { GoLocation } from \"react-icons/go\";\nimport { WiSunset, WiSunrise } from \"react-icons/wi\";\nimport { MdWaves } from \"react-icons/md\";\nimport { GiGroundSprout } from \"react-icons/gi\";\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [apiData, setApiData] = useState([]);\n  const [city, setCity] = useState(\"faisalabad\");\n  const [weatherMood, setWeatherMood] = useState(\"\");\n\n  const getWeather = async () => {\n    try {\n      const response = await Axios.get(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=c9c8dd5bbecdbacdce522ee57a5bc27c`\n      );\n      setLoading(false);\n      setApiData(response);\n    } catch (error) {\n      setLoading(false);\n      console.log(error);\n    }\n  };\n\n  const weatherIcon = () => {\n    if (apiData?.data?.weather[0].description == \"clear sky\") {\n      return setWeatherMood(\"https://openweathermap.org/img/wn/01d@2x.png\");\n    } else if (apiData?.data?.weather[0].description == \"few clouds\") {\n      return setWeatherMood(\"https://openweathermap.org/img/wn/02d@2x.png\");\n    } else if (apiData?.data?.weather[0].description == \"scattered clouds\") {\n      return setWeatherMood(\"https://openweathermap.org/img/wn/03d@2x.png\");\n    } else if (apiData?.data?.weather[0].description == \"broken clouds\") {\n      return setWeatherMood(\"https://openweathermap.org/img/wn/04d@2x.png\");\n    } else if (apiData?.data?.weather[0].description == \"shower rain\") {\n      return setWeatherMood(\"https://openweathermap.org/img/wn/09d@2x.png\");\n    } else if (apiData?.data?.weather[0].description == \"rain\") {\n      return setWeatherMood(\"https://openweathermap.org/img/wn/10d@2x.png\");\n    } else if (apiData?.data?.weather[0].description == \"thunderstorm\") {\n      return setWeatherMood(\"https://openweathermap.org/img/wn/11d@2x.png\");\n    } else if (apiData?.data?.weather[0].description == \"snow\") {\n      return setWeatherMood(\"https://openweathermap.org/img/wn/13d@2x.png\");\n    } else if (apiData?.data?.weather[0].description == \"mist\") {\n      return setWeatherMood(\"https://openweathermap.org/img/wn/50d@2x.png\");\n    } else {\n      console.log(\"Error is happening\");\n    }\n  };\n\n\n  // Run when window load\n  useEffect(() => {\n    getWeather();\n  }, []);\n  // run when apidata Change\n  useEffect(() => {\n    weatherIcon();\n  }, [apiData]);\n\n  if (loading) {\n    return (\n      <main>\n        <IsLoading />\n      </main>\n    );\n  }\n\n  const date = new Date();\n  let day = date.getDay();\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\n  let currentmonth = date.getMonth();\n  let month = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  let year = date.getFullYear();\n\n  let currentday = date.getDate();\n\n  function msToTime(milli) {\n    let seconds = Math.floor((milli / 1000) % 60);\n    let minutes = Math.floor((milli / (60 * 1000)) % 60);\n\n    return minutes + \":\" + seconds;\n  }\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"weather-side\">\n          <div className=\"weather-gradient\"></div>\n          <div className=\"date-container\">\n            <h2 className=\"date-dayname\">{days[day]}</h2>\n            <span className=\"date-day\">{`${currentday} ${month[currentmonth]} ${year}`}</span>\n            <i>\n              <GoLocation className=\"location_icon\" />\n            </i>\n            <span className=\"location\">\n              {city}, {apiData?.data?.sys?.country}\n            </span>\n          </div>\n          <div className=\"weather-container\">\n            <i className=\"weather-icon\">\n              <img src={weatherMood} alt=\"weather Icon\" />\n            </i>\n            <h1 className=\"weather-temp\">{apiData?.data?.main?.temp}Â°C</h1>\n            <h3 className=\"weather-desc\">\n              {apiData?.data?.weather[0].description}\n            </h3>\n          </div>\n        </div>\n        <div className=\"info-side\">\n          <div className=\"today-info-container\">\n            <div className=\"today-info\">\n              <div className=\"precipitation\">\n                <span className=\"title\">Pressure</span>\n                <span className=\"value\">\n                  {apiData?.data?.main?.pressure} Hg\n                </span>\n                <div className=\"clear\"></div>\n              </div>\n              <div className=\"humidity\">\n                <span className=\"title\">HUMIDITY</span>\n                <span className=\"value\">{apiData?.data?.main?.humidity} %</span>\n                <div className=\"clear\"></div>\n              </div>\n              <div className=\"wind\">\n                <span className=\"title\">WIND</span>\n                <span className=\"value\">{apiData?.data?.wind?.speed} km/h</span>\n                <div className=\"clear\"></div>\n              </div>\n            </div>\n          </div>\n          <div className=\"week-container\">\n            <ul class=\"week-list\">\n              <li className=\"Icon-Container\">\n                <i class=\"day-icon\" data-feather=\"sun\">\n                  <WiSunrise className=\"later-icon\" />\n                </i>\n                <span class=\"day-name\">Sunrise</span>\n                <span class=\"day-temp\">\n                  {msToTime(apiData?.data?.sys?.sunrise)} AM\n                </span>\n              </li>\n              <li className=\"Icon-Container\">\n                <i class=\"day-icon\">\n                  <WiSunset className=\"later-icon\" />\n                </i>\n                <span class=\"day-name\">Sunset</span>\n                <span class=\"day-temp\">\n                  {msToTime(apiData?.data?.sys?.sunset)} PM\n                </span>\n              </li>\n              <li className=\"Icon-Container\">\n                <i class=\"day-icon\">\n                  <MdWaves className=\"later-icon\" />\n                </i>\n                <span class=\"day-name\">Sea-Level</span>\n                <span class=\"day-temp\">{apiData?.data?.main?.sea_level} h</span>\n              </li>\n              <li className=\"Icon-Container\">\n                <i class=\"day-icon\">\n                  <GiGroundSprout className=\"later-icon\" />\n                </i>\n                <span class=\"day-name\">Grnd-Level</span>\n                <span class=\"day-temp\">\n                  {apiData?.data?.main?.grnd_level} h\n                </span>\n              </li>\n              <div class=\"clear\"></div>\n            </ul>\n          </div>\n          <div className=\"location-container form__group\">\n            <input\n              type=\"input\"\n              class=\"form__field\"\n              placeholder=\"Name\"\n              name=\"name\"\n              id=\"name\"\n              required\n              value={city}\n              onChange={(e) => {\n                setCity(e.target.value);\n              }}\n            />\n            <label for=\"name\" class=\"form__label\">\n              Name\n            </label>\n            <button\n              className=\"location-button\"\n              onClick={() => {\n                getWeather();\n              }}\n            >\n              <span>Search</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./Assets/Weather.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}